{"ast":null,"code":"var _jsxFileName = \"/Users/parthabhang/my-blog/src/components/BlogPost.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlogPost = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  useEffect(() => {\n    // Simulating fetching post details from a backend\n    const fetchPost = async () => {\n      // Here you can use your actual fetching logic to get post details from a backend\n      // For now, I'm just using a setTimeout to simulate fetching delay\n      setTimeout(() => {\n        const post = {\n          id: parseInt(id),\n          title: `Blog Post ${id}`,\n          category: id % 3 === 0 ? 'Travel' : id % 3 === 1 ? 'Food' : 'Culture',\n          content: `This is the content of Blog Post ${id}.`\n        };\n        setPost(post);\n      }, 500); // Simulated delay of 500 milliseconds\n    };\n    fetchPost();\n  }, [id]);\n\n  // Render loading state if post is not yet fetched\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-outline text-md mb-2 w-1/6\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-600 mb-4\",\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/post/${id}/about`,\n      className: \"btn btn-outline text-md w-1/6\",\n      children: \"About the Blog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(BlogPost, \"6+b5eOm0C2EIwwbuXxVLhmPamew=\", false, function () {\n  return [useParams];\n});\n_c = BlogPost;\nexport default BlogPost;\nvar _c;\n$RefreshReg$(_c, \"BlogPost\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","jsxDEV","_jsxDEV","BlogPost","_s","id","post","setPost","fetchPost","setTimeout","parseInt","title","category","content","children","fileName","_jsxFileName","lineNumber","columnNumber","className","to","_c","$RefreshReg$"],"sources":["/Users/parthabhang/my-blog/src/components/BlogPost.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\n\nconst BlogPost = () => {\n  const { id } = useParams();\n  const [post, setPost] = useState(null);\n\n  useEffect(() => {\n    // Simulating fetching post details from a backend\n    const fetchPost = async () => {\n      // Here you can use your actual fetching logic to get post details from a backend\n      // For now, I'm just using a setTimeout to simulate fetching delay\n      setTimeout(() => {\n        const post = {\n          id: parseInt(id),\n          title: `Blog Post ${id}`,\n          category: id % 3 === 0 ? 'Travel' : id % 3 === 1 ? 'Food' : 'Culture',\n          content: `This is the content of Blog Post ${id}.`,\n        };\n        setPost(post);\n      }, 500); // Simulated delay of 500 milliseconds\n    };\n\n    fetchPost();\n  }, [id]);\n\n  // Render loading state if post is not yet fetched\n  if (!post) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"flex flex-col\">\n      <Link to=\"/\" className=\"btn btn-outline text-md mb-2 w-1/6\">Go Back</Link>\n      <h2 className=\"text-2xl font-bold mb-4\">{post.title}</h2>\n      <p className=\"text-gray-600 mb-4\">{post.content}</p>\n      <Link to={`/post/${id}/about`} className=\"btn btn-outline text-md w-1/6\">About the Blog</Link>\n    </div>\n  );\n};\n\nexport default BlogPost;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B;MACA;MACAC,UAAU,CAAC,MAAM;QACf,MAAMH,IAAI,GAAG;UACXD,EAAE,EAAEK,QAAQ,CAACL,EAAE,CAAC;UAChBM,KAAK,EAAG,aAAYN,EAAG,EAAC;UACxBO,QAAQ,EAAEP,EAAE,GAAG,CAAC,KAAK,CAAC,GAAG,QAAQ,GAAGA,EAAE,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,SAAS;UACrEQ,OAAO,EAAG,oCAAmCR,EAAG;QAClD,CAAC;QACDE,OAAO,CAACD,IAAI,CAAC;MACf,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX,CAAC;IAEDE,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACH,EAAE,CAAC,CAAC;;EAER;EACA,IAAI,CAACC,IAAI,EAAE;IACT,oBAAOJ,OAAA;MAAAY,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACEhB,OAAA;IAAKiB,SAAS,EAAC,eAAe;IAAAL,QAAA,gBAC5BZ,OAAA,CAACF,IAAI;MAACoB,EAAE,EAAC,GAAG;MAACD,SAAS,EAAC,oCAAoC;MAAAL,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC1EhB,OAAA;MAAIiB,SAAS,EAAC,yBAAyB;MAAAL,QAAA,EAAER,IAAI,CAACK;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACzDhB,OAAA;MAAGiB,SAAS,EAAC,oBAAoB;MAAAL,QAAA,EAAER,IAAI,CAACO;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpDhB,OAAA,CAACF,IAAI;MAACoB,EAAE,EAAG,SAAQf,EAAG,QAAQ;MAACc,SAAS,EAAC,+BAA+B;MAAAL,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3F,CAAC;AAEV,CAAC;AAACd,EAAA,CApCID,QAAQ;EAAA,QACGJ,SAAS;AAAA;AAAAsB,EAAA,GADpBlB,QAAQ;AAsCd,eAAeA,QAAQ;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}